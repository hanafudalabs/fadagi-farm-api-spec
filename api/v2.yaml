openapi: 3.0.3
info:
  title: Fadagi API Specification (v2)
  description: |-
    API untuk platform investasi ternak Fadagi (versi 2).
    Dokumentasi ini mencakup otentikasi dengan alur paksa ubah password, manajemen saldo manual oleh Admin, dan siklus lengkap penarikan dana oleh Investor.

    ### Alur Kerja Utama Investor:
    1. Didaftarkan oleh Admin.
    2. Menerima kredensial & login untuk pertama kali.
    3. Dipaksa untuk mengubah password.
    4. Melengkapi profil (terutama info rekening bank) via endpoint `PUT /customer/profile`.
    5. Menghubungi Admin untuk melakukan top-up saldo.
    6. Mulai berinvestasi.
    7. Mengajukan penarikan dana jika diperlukan.

  version: 2.0.0
  contact:
    name: Fadagi Support
    email: fadagi.official@gmail.com
    url: https://www.fadagi.com

servers:
  - url: "http://localhost:8080/api"
    description: Development Server

tags:
  - name: Authentication
    description: Registrasi (Admin), login, dan ubah password.
  - name: Public
    description: Endpoint yang dapat diakses tanpa otentikasi.
  - name: Investor - Profile & Wallets
    description: Mengelola profil, dompet (tabungan), pembayaran, dan penarikan dana.
  - name: Investor - Investments
    description: Mengelola investasi ternak oleh investor.
  - name: Admin - Monitoring
    description: Endpoint khusus Admin untuk memantau aktivitas platform (read-only).
  - name: Admin - Management
    description: Endpoint khusus Admin untuk mengelola data master (investor, ternak, top-up, withdrawals).

# Global Security Definition
security:
  - bearerAuth: []

paths:
  # ===================================
  # AUTHENTICATION
  # ===================================
  /auth/register:
    post:
      tags: [Authentication]
      summary: Mendaftarkan akun Investor baru (Admin-only)
      description: |-
        Endpoint ini hanya dapat diakses oleh Admin untuk membuat akun bagi Investor baru.
        Akun yang dibuat akan memiliki status `mustChangePassword: true` dan `bankAccountInfo: null`.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Akun Investor berhasil dibuat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' # Menggunakan skema User standar, di mana bankAccountInfo bisa null.
        '400':
          description: Bad Request (e.g., password tidak cocok, format email salah).
        '401':
          description: Unauthorized (Token tidak valid).
        '403':
          description: Forbidden (Hanya Admin yang bisa mengakses).
        '409':
          description: Conflict (Email sudah terdaftar).

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login pengguna (Admin/Investor)
      description: Endpoint untuk otentikasi pengguna dan mendapatkan JWT token. Respon akan menyertakan flag `mustChangePassword`.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login berhasil.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    allOf:
                      - $ref: '#/components/schemas/User'
                      - type: object
                        properties:
                          mustChangePassword:
                            type: boolean
                            description: "Jika `true`, user harus segera memanggil endpoint `/auth/change-password`."
        '401':
          description: Unauthorized (Email atau password salah).

  /auth/change-password:
    post:
      tags: [Authentication]
      summary: Mengubah password pengguna (Investor-only)
      description: Diperlukan untuk investor yang baru pertama kali login. Endpoint lain akan diblokir jika `mustChangePassword` masih `true`.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword, confirmNewPassword]
              properties:
                currentPassword:
                  type: string
                  format: password
                  example: "PasswordSementaraDariAdmin"
                newPassword:
                  type: string
                  format: password
                  example: "PasswordBaruYangAman123!"
                confirmNewPassword:
                  type: string
                  format: password
                  example: "PasswordBaruYangAman123!"
      responses:
        '200':
          description: Password berhasil diubah.
        '400':
          description: Bad Request (e.g., password baru tidak cocok, password saat ini salah).
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden (jika user tidak perlu mengubah password).

  # ===================================
  # PUBLIC
  # ===================================
  /cattle/available:
    get:
      tags: [Public]
      summary: Melihat daftar ternak yang tersedia untuk investasi
      description: Menampilkan semua paket investasi ternak yang statusnya masih 'TERSEDIA'.
      security: []
      responses:
        '200':
          description: Daftar ternak yang tersedia berhasil diambil.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cattle'
      
  # ===================================
  # INVESTOR - PROFILE & WALLETS
  # ===================================
  /customer/profile:
    get:
      tags: [Investor - Profile & Wallets]
      summary: Mendapatkan profil investor yang sedang login
      responses:
        '200':
          description: Data profil investor berhasil diambil.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized.
    put:
      tags: [Investor - Profile & Wallets]
      summary: Memperbarui profil investor (e.g., nama, info rekening bank)
      description: Investor mengisi atau mengubah data profilnya. Informasi rekening bank wajib diisi sebelum melakukan penarikan dana.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profil berhasil diperbarui.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized.

  /customer/savings:
    get:
      tags: [Investor - Profile & Wallets]
      summary: Melihat saldo tabungan/dompet investor
      responses:
        '200':
          description: Sukses, data saldo dompet ditampilkan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Saving'
        '401':
          description: Unauthorized.

  /customer/payments:
    get:
      tags: [Investor - Profile & Wallets]
      summary: Melihat riwayat top-up investor
      description: Menampilkan riwayat top-up yang telah diproses oleh Admin.
      responses:
        '200':
          description: Sukses, daftar riwayat top-up ditampilkan.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '401':
          description: Unauthorized.

  /customer/withdrawals:
    get:
      tags: [Investor - Profile & Wallets]
      summary: Melihat riwayat permintaan penarikan dana
      responses:
        '200':
          description: Daftar riwayat penarikan dana berhasil diambil.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Withdrawal'
        '401':
          description: Unauthorized.
    post:
      tags: [Investor - Profile & Wallets]
      summary: Mengajukan permintaan penarikan dana
      description: Mengirimkan permintaan penarikan dana dari dompet ke rekening bank. Permintaan akan diproses oleh Admin.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount]
              properties:
                amount:
                  type: number
                  format: double
                  description: "Jumlah dana yang ingin ditarik."
                  example: 5000000
      responses:
        '202':
          description: Permintaan penarikan berhasil diajukan dan sedang menunggu proses.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Withdrawal'
        '400':
          description: Bad Request (e.g., saldo tidak mencukupi, info rekening bank belum diisi).
        '401':
          description: Unauthorized.
      
  # ===================================
  # INVESTOR - INVESTMENTS
  # ===================================
  /customer/investments:
    get:
      tags: [Investor - Investments]
      summary: Melihat riwayat investasi investor
      responses:
        '200':
          description: Sukses, daftar investasi ditampilkan.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Investment'
        '401':
          description: Unauthorized.
    post:
      tags: [Investor - Investments]
      summary: Membuat transaksi investasi baru
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [cattleId, amount]
              properties:
                cattleId:
                  type: string
                  description: ID dari ternak yang akan diinvestasikan.
                amount:
                  type: number
                  format: double
                  description: Jumlah dana yang diinvestasikan.
      responses:
        '201':
          description: Investasi berhasil dibuat.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investment'
        '400':
          description: Bad Request (e.g., saldo tidak cukup, ternak tidak tersedia).
        '401':
          description: Unauthorized.
        
  /customer/documents:
    get:
      tags: [Investor - Investments]
      summary: Melihat daftar dokumen investor
      responses:
        '200':
          description: Sukses, daftar dokumen ditampilkan.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '401':
          description: Unauthorized.

  /customer/investments/{investmentId}/fulfillment:
    get:
      tags: [Investor - Investments]
      summary: Melihat detail penyelesaian investasi (Payout)
      parameters:
        - name: investmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sukses, detail penyelesaian investasi ditampilkan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fulfillment'
        '401':
          description: Unauthorized.
        '404':
          description: Not Found (Investasi tidak ditemukan).
      
  # ===================================
  # ADMIN - MONITORING
  # ===================================
  /admin/monitoring/dashboard:
    get:
      tags: [Admin - Monitoring]
      summary: Melihat ringkasan data platform (Admin-only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sukses, data ringkasan ditampilkan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalInvestors: { type: integer }
                  totalActiveInvestments: { type: integer }
                  totalFundsInvested: { type: number, format: double }
                  totalCattleAvailable: { type: integer }
        '403':
          description: Forbidden.
          
  /admin/monitoring/investors:
    get:
      tags: [Admin - Monitoring]
      summary: Melihat semua akun investor (Admin-only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sukses, daftar semua investor ditampilkan.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Forbidden.

  /admin/monitoring/withdrawals:
    get:
      tags: [Admin - Monitoring]
      summary: Memantau permintaan penarikan dana (Admin-only)
      description: Mengambil daftar permintaan penarikan berdasarkan status.
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [PENDING, PROCESSED, REJECTED]
      responses:
        '200':
          description: Sukses, daftar permintaan penarikan ditampilkan.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Withdrawal'
        '403':
          description: Forbidden.
  
  # ===================================
  # ADMIN - MANAGEMENT
  # ===================================
  /admin/management/investors/{investorId}/topup:
    post:
      tags: [Admin - Management]
      summary: Menambahkan saldo ke dompet investor (Admin-only)
      description: Digunakan Admin untuk mencatat top-up setelah menerima konfirmasi transfer manual dari investor.
      security:
        - bearerAuth: []
      parameters:
        - name: investorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount]
              properties:
                amount:
                  type: number
                  format: double
                  example: 10000000
                notes:
                  type: string
                  description: "Catatan opsional, e.g., 'Konfirmasi via WA'."
                  example: "Konfirmasi via WA dari Budi 25/12/2023"
      responses:
        '200':
          description: Saldo investor berhasil ditambahkan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Saving'
        '403':
          description: Forbidden.
        '404':
          description: Investor Not Found.

  /admin/management/cattle:
    post:
      tags: [Admin - Management]
      summary: Menambah data ternak baru untuk investasi (Admin-only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CattleInput'
      responses:
        '201':
          description: Data ternak berhasil ditambahkan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cattle'
        '403':
          description: Forbidden.

  /admin/management/cattle/{cattleId}:
    put:
      tags: [Admin - Management]
      summary: Memperbarui data ternak (Admin-only)
      security:
        - bearerAuth: []
      parameters:
        - name: cattleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CattleInput'
      responses:
        '200':
          description: Data ternak berhasil diperbarui.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cattle'
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      
  /admin/management/withdrawals/{withdrawalId}:
    patch:
      tags: [Admin - Management]
      summary: Memproses permintaan penarikan dana (Admin-only)
      description: Mengubah status permintaan penarikan (e.g., dari PENDING ke PROCESSED). Tindakan ini akan mengurangi saldo dompet investor jika status diubah menjadi PROCESSED.
      security:
        - bearerAuth: []
      parameters:
        - name: withdrawalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  type: string
                  enum: [PROCESSED, REJECTED]
                rejectionReason:
                  type: string
                  description: "Wajib diisi jika status adalah REJECTED."
      responses:
        '200':
          description: Status permintaan penarikan berhasil diperbarui.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Withdrawal'
        '400':
          description: Bad Request (e.g., status tidak valid, saldo investor tidak mencukupi saat proses).
        '403':
          description: Forbidden.
        '404':
          description: Withdrawal request not found.

# ===================================
# REUSABLE COMPONENTS
# ===================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # --- Request Bodies ---
    RegisterRequest:
      type: object
      required: [name, email, password, confirmPassword]
      properties:
        name: { type: string, example: "Budi Investor" }
        email: { type: string, format: email, example: "budi.investor@example.com" }
        password: { type: string, format: password, example: "Password123!" }
        confirmPassword: { type: string, format: password, example: "Password123!" }
        referral: { type: string, description: "Kode referral dari investor lain (opsional).", example: "INV-4L3H0J-43NDJ3" }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: "budi.investor@example.com" }
        password: { type: string, format: password, example: "Password123!" }

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: "Budi Investor Pratama"
        bankAccountInfo:
          type: object
          properties:
            bankName: { type: string, example: "BCA" }
            accountNumber: { type: string, example: "1234567890" }
            accountHolderName: { type: string, example: "Budi Investor Pratama" }

    CattleInput:
      type: object
      description: "Data yang dibutuhkan untuk membuat atau update data ternak."
      required: [name, description, investmentTarget, investmentPeriodDays, expectedROI, status]
      properties:
        name: { type: string, example: "Sapi Limousin Batch #3" }
        description: { type: string, example: "Sapi jantan Limousin, perkiraan bobot 800kg saat panen." }
        investmentTarget: { type: number, format: double, example: 25000000 }
        investmentPeriodDays: { type: integer, example: 180 }
        expectedROI: { type: number, format: double, description: "Estimasi Return on Investment dalam persen (%).", example: 15.5 }
        status: { type: string, enum: [TERSEDIA, DIDANAI, PEMELIHARAAN, TERJUAL] }
        imageUrl: { type: string, format: uri, example: "https://example.com/images/sapi_limousin_3.jpg" }

    # --- Data Models (Responses) ---
    User:
      type: object
      properties:
        id: { type: string, readOnly: true }
        name: { type: string }
        email: { type: string, format: email }
        role: { type: string, enum: [ADMIN, INVESTOR] }
        bankAccountInfo: { $ref: '#/components/schemas/UpdateProfileRequest/properties/bankAccountInfo', nullable: true }
        referralCode: { type: string, readOnly: true }
        createdAt: { type: string, format: date-time, readOnly: true }
        
    Saving:
      type: object
      properties:
        userId: { type: string, readOnly: true }
        balance: { type: number, format: double, example: 5000000.00 }
        lastUpdated: { type: string, format: date-time, readOnly: true }
          
    Payment:
      type: object
      properties:
        id: { type: string, readOnly: true }
        userId: { type: string, readOnly: true }
        amount: { type: number, format: double }
        status: { type: string, enum: [SUCCESS] }
        paymentMethod: { type: string, example: "Bank Transfer" }
        notes: { type: string, nullable: true }
        processedBy: { type: string, nullable: true, description: "Admin ID" }
        createdAt: { type: string, format: date-time, readOnly: true }

    Withdrawal:
      type: object
      properties:
        id: { type: string, readOnly: true }
        userId: { type: string, readOnly: true }
        amount: { type: number, format: double }
        status: { type: string, enum: [PENDING, PROCESSED, REJECTED] }
        requestedAt: { type: string, format: date-time, readOnly: true }
        processedAt: { type: string, format: date-time, nullable: true, readOnly: true }
        rejectionReason: { type: string, nullable: true, readOnly: true }

    Cattle:
      allOf:
        - $ref: '#/components/schemas/CattleInput'
        - type: object
          properties:
            id: { type: string, readOnly: true }
            currentFunding: { type: number, format: double, example: 5000000, readOnly: true }
            createdAt: { type: string, format: date-time, readOnly: true }
        
    Investment:
      type: object
      properties:
        id: { type: string, readOnly: true }
        userId: { type: string, readOnly: true }
        cattleId: { type: string, readOnly: true }
        investmentAmount: { type: number, format: double }
        purchaseDate: { type: string, format: date-time, readOnly: true }
        status: { type: string, enum: [ACTIVE, COMPLETED], readOnly: true }
        
    Document:
      type: object
      properties:
        id: { type: string, readOnly: true }
        investmentId: { type: string, readOnly: true }
        documentType: { type: string, enum: [AGREEMENT, RECEIPT] }
        url: { type: string, format: uri, description: "URL untuk mengunduh dokumen." }
        uploadedAt: { type: string, format: date-time, readOnly: true }
          
    Fulfillment:
      type: object
      properties:
        id: { type: string, readOnly: true }
        investmentId: { type: string, readOnly: true }
        saleDate: { type: string, format: date-time }
        salePrice: { type: number, format: double, description: "Harga jual akhir ternak." }
        profit: { type: number, format: double, description: "Keuntungan kotor dari penjualan." }
        investorPayout: { type: number, format: double, description: "Jumlah dana yang dicairkan ke investor (setelah bagi hasil)." }
        status: { type: string, enum: [PENDING_PAYOUT, PAID_OUT] }